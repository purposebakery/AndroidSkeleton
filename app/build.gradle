plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

ext {
    builtTypeClass = "com.purposebakery.androidskeleton.framework.configuration.BuildType"
}

android {
    compileSdk versions.compileSdk

    defaultConfig {
        applicationId "com.purposebakery.androidskeleton"
        minSdk versions.minSdk
        targetSdk versions.targetSdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    signingConfigs {
        release {
            keyAlias purposebakeryKeyAlias
            keyPassword purposebakeryKeyPassword
            storePassword purposebakeryStorePassword
            storeFile file(purposebakeryStoreFile)
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            buildConfigField "String", "API_KEY_DATA_GOV", apiKeyDataGov
            buildConfigField(project.ext.builtTypeClass, "BUILD_TYPE_ENUM", "${project.ext.builtTypeClass}.DEBUG")
        }
        release {
            minifyEnabled false
            buildConfigField "String", "API_KEY_DATA_GOV", apiKeyDataGov
            buildConfigField(project.ext.builtTypeClass, "BUILD_TYPE_ENUM", "${project.ext.builtTypeClass}.RELEASE")
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility versions.javaCompileCompatibility
        targetCompatibility versions.javaCompileCompatibility
    }
    kotlinOptions {
        jvmTarget = versions.kotlinJvmTarget
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion versions.androidxCompose
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

kapt {
    // Allow references to generated code
    correctErrorTypes = true
}

dependencies {
    implementation project(path: ':design')

    // dependency injection
    implementation "com.google.dagger:hilt-android:$versions.hilt"
    kapt "com.google.dagger:hilt-compiler:$versions.hilt"

    // core
    implementation "androidx.core:core-ktx:$versions.androidxCore"

    // compose
    implementation "androidx.compose.ui:ui:$versions.androidxCompose"
    implementation "androidx.compose.material:material:$versions.androidxCompose"
    implementation "androidx.compose.ui:ui-tooling-preview:$versions.androidxCompose"
    implementation "androidx.compose.runtime:runtime-livedata:$versions.androidxCompose"
    debugImplementation "androidx.compose.ui:ui-tooling:$versions.androidxCompose"
    implementation "androidx.activity:activity-compose:$versions.androidxActivityCompose"

    androidTestImplementation("androidx.compose.ui:ui-test-junit4:$versions.androidxCompose")
    debugImplementation("androidx.compose.ui:ui-test-manifest:$versions.androidxCompose")

    // ui
    implementation "io.coil-kt:coil-compose:$versions.coil"

    // network
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okHttpLoggingInterceptor"
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$versions.retrofit"

    // logging
    implementation "com.jakewharton.timber:timber:$versions.timber"

    // architecture components
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$versions.androidxLifecycle"

    // unit testing
    testImplementation "junit:junit:$versions.junit"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$versions.mockitoKotlin"
    testImplementation "androidx.arch.core:core-testing:$versions.archCoreTesting"
}